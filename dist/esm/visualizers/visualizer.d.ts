import AudioAnalyzer from '../analysers/analyzer';
import { IParticle, IOptions } from '../types/types';
declare class Visualizer {
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D;
    data: AudioAnalyzer;
    renderLoop: number;
    frame: number;
    particleSystem: IParticle[];
    constructor(canvas: HTMLCanvasElement, data: AudioAnalyzer | Uint8Array);
    dataPreProcessor(dataType?: string, amplitude?: number, range?: number, windowName?: string): number[];
    dataToRect(input: number[]): number[][];
    dataToPolar(input: number[], radius?: number, angle?: number, autoRotate?: number): number[][];
    particles(data: number[][], velocity?: number[], gravity?: number, lifespan?: number, birthrate?: number, samples?: number): void;
    dots(data: number[][], samples?: number): void;
    line(data: number[][], samples?: number): void;
    bars(data: number[][], numBars?: number, mode?: 'rect' | 'polar', innerRadius?: number): void;
    randomColor(): string;
    randomPalette(colorArray?: string[]): string;
    linearGradient(color1?: string, color2?: string, flip?: string): CanvasGradient;
    radialGradient(color1?: string, color2?: string, innerRadius?: number, outerRadius?: number): CanvasGradient;
    fill(vizType: any, fillType: any, fillColor: any, flip: any): void;
    stroke(lineWidth?: number, style?: string): void;
    mirror(): void;
    layer(options: IOptions): void;
    render(options: IOptions | IOptions[]): void;
    stop(): void;
    simpleLine(options?: string): void;
    simpleBars(options?: string): void;
    simplePolarLine(options?: string): void;
    simplePolarBars(options?: string): void;
}
export default Visualizer;
